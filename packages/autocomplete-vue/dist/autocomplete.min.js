var Autocomplete = (function() {
  'use strict'
  function e(e, t) {
    var n = Object.keys(e)
    if (Object.getOwnPropertySymbols) {
      var s = Object.getOwnPropertySymbols(e)
      t &&
        (s = s.filter(function(t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable
        })),
        n.push.apply(n, s)
    }
    return n
  }
  function t(t) {
    for (var n = 1; n < arguments.length; n++) {
      var s = null != arguments[n] ? arguments[n] : {}
      n % 2
        ? e(Object(s), !0).forEach(function(e) {
            o(t, e, s[e])
          })
        : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(s))
        : e(Object(s)).forEach(function(e) {
            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(s, e))
          })
    }
    return t
  }
  function n(e, t) {
    if (!(e instanceof t))
      throw new TypeError('Cannot call a class as a function')
  }
  function s(e, t) {
    for (var n = 0; n < t.length; n++) {
      var s = t[n]
      ;(s.enumerable = s.enumerable || !1),
        (s.configurable = !0),
        'value' in s && (s.writable = !0),
        Object.defineProperty(e, s.key, s)
    }
  }
  function i(e, t, n) {
    return (
      t && s(e.prototype, t),
      n && s(e, n),
      Object.defineProperty(e, 'prototype', { writable: !1 }),
      e
    )
  }
  function o(e, t, n) {
    return (
      t in e
        ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0,
          })
        : (e[t] = n),
      e
    )
  }
  var r = function(e, t) {
      return e.matches
        ? e.matches(t)
        : e.msMatchesSelector
        ? e.msMatchesSelector(t)
        : e.webkitMatchesSelector
        ? e.webkitMatchesSelector(t)
        : null
    },
    l = function(e, t) {
      return e.closest
        ? e.closest(t)
        : (function(e, t) {
            for (var n = e; n && 1 === n.nodeType; ) {
              if (r(n, t)) return n
              n = n.parentNode
            }
            return null
          })(e, t)
    },
    u = function(e) {
      return Boolean(e && 'function' == typeof e.then)
    },
    a = i(function e() {
      var t = this,
        s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
        i = s.search,
        r = s.autoSelect,
        a = void 0 !== r && r,
        c = s.setValue,
        d = void 0 === c ? function() {} : c,
        h = s.setAttribute,
        p = void 0 === h ? function() {} : h,
        f = s.onUpdate,
        b = void 0 === f ? function() {} : f,
        v = s.onSubmit,
        m = void 0 === v ? function() {} : v,
        g = s.onShow,
        w = void 0 === g ? function() {} : g,
        y = s.autocorrect,
        R = void 0 !== y && y,
        L = s.onHide,
        x = void 0 === L ? function() {} : L,
        S = s.onLoading,
        P = void 0 === S ? function() {} : S,
        I = s.onLoaded,
        _ = void 0 === I ? function() {} : I,
        O = s.submitOnEnter,
        C = void 0 !== O && O
      n(this, e),
        o(this, 'value', ''),
        o(this, 'searchCounter', 0),
        o(this, 'results', []),
        o(this, 'selectedIndex', -1),
        o(this, 'selectedResult', null),
        o(this, 'destroy', function() {
          (t.search = null),
            (t.setValue = null),
            (t.setAttribute = null),
            (t.onUpdate = null),
            (t.onSubmit = null),
            (t.autocorrect = null),
            (t.onShow = null),
            (t.onHide = null),
            (t.onLoading = null),
            (t.onLoaded = null)
        }),
        o(this, 'handleInput', function(e) {
          var n = e.target.value
          t.updateResults(n), (t.value = n)
        }),
        o(this, 'handleKeyDown', function(e) {
          var n = e.key
          switch (n) {
            case 'Up':
            case 'Down':
            case 'ArrowUp':
            case 'ArrowDown':
              var s =
                'ArrowUp' === n || 'Up' === n
                  ? t.selectedIndex - 1
                  : t.selectedIndex + 1
              e.preventDefault(), t.handleArrows(s)
              break
            case 'Tab':
              t.selectResult()
              break
            case 'Enter':
              var i = e.target.getAttribute('aria-activedescendant').length > 0
              ;(t.selectedResult =
                t.results[t.selectedIndex] || t.selectedResult),
                t.selectResult(),
                t.submitOnEnter
                  ? t.selectedResult && t.onSubmit(t.selectedResult)
                  : i
                  ? e.preventDefault()
                  : (t.selectedResult && t.onSubmit(t.selectedResult),
                    (t.selectedResult = null))
              break
            case 'Esc':
            case 'Escape':
              t.hideResults(), t.setValue()
              break
            default:
              return
          }
        }),
        o(this, 'handleFocus', function(e) {
          var n = e.target.value
          t.updateResults(n), (t.value = n)
        }),
        o(this, 'handleBlur', function() {
          t.hideResults()
        }),
        o(this, 'handleResultMouseDown', function(e) {
          e.preventDefault()
        }),
        o(this, 'handleResultClick', function(e) {
          var n = e.target,
            s = l(n, '[data-result-index]')
          if (s) {
            t.selectedIndex = parseInt(s.dataset.resultIndex, 10)
            var i = t.results[t.selectedIndex]
            t.selectResult(), t.onSubmit(i)
          }
        }),
        o(this, 'handleArrows', function(e) {
          var n = t.results.length
          ;(t.selectedIndex = ((e % n) + n) % n),
            t.onUpdate(t.results, t.selectedIndex)
        }),
        o(this, 'selectResult', function() {
          var e = t.results[t.selectedIndex]
          e && t.setValue(e), t.hideResults()
        }),
        o(this, 'updateResults', function(e) {
          var n = ++t.searchCounter
          t.onLoading(),
            t.search(e).then(function(e) {
              n === t.searchCounter &&
                ((t.results = e),
                t.onLoaded(),
                0 !== t.results.length
                  ? ((t.selectedIndex = t.autoSelect ? 0 : -1),
                    t.onUpdate(t.results, t.selectedIndex),
                    t.showResults())
                  : t.hideResults())
            })
        }),
        o(this, 'showResults', function() {
          t.setAttribute('aria-expanded', !0), t.onShow()
        }),
        o(this, 'hideResults', function() {
          (t.selectedIndex = -1),
            (t.results = []),
            t.setAttribute('aria-expanded', !1),
            t.setAttribute('aria-activedescendant', ''),
            t.onUpdate(t.results, t.selectedIndex),
            t.onHide()
        }),
        o(this, 'checkSelectedResultVisible', function(e) {
          var n = e.querySelector(
            '[data-result-index="'.concat(t.selectedIndex, '"]')
          )
          if (n) {
            var s = e.getBoundingClientRect(),
              i = n.getBoundingClientRect()
            i.top < s.top
              ? (e.scrollTop -= s.top - i.top)
              : i.bottom > s.bottom && (e.scrollTop += i.bottom - s.bottom)
          }
        }),
        (this.search = u(i)
          ? i
          : function(e) {
              return Promise.resolve(i(e))
            }),
        (this.autoSelect = a),
        (this.setValue = d),
        (this.setAttribute = p),
        (this.onUpdate = b),
        (this.onSubmit = m),
        (this.autocorrect = R),
        (this.onShow = w),
        (this.onHide = x),
        (this.onLoading = P),
        (this.onLoaded = _),
        (this.submitOnEnter = C)
    }),
    c = 0,
    d = function() {
      var e =
        arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ''
      return ''.concat(e).concat(++c)
    }
  function h(e, t, n, s, i, o, r, l, u, a) {
    'boolean' != typeof r && ((u = l), (l = r), (r = !1))
    const c = 'function' == typeof n ? n.options : n
    let d
    if (
      (e &&
        e.render &&
        ((c.render = e.render),
        (c.staticRenderFns = e.staticRenderFns),
        (c._compiled = !0),
        i && (c.functional = !0)),
      s && (c._scopeId = s),
      o
        ? ((d = function(e) {
            (e =
              e ||
              (this.$vnode && this.$vnode.ssrContext) ||
              (this.parent &&
                this.parent.$vnode &&
                this.parent.$vnode.ssrContext)) ||
              'undefined' == typeof __VUE_SSR_CONTEXT__ ||
              (e = __VUE_SSR_CONTEXT__),
              t && t.call(this, u(e)),
              e && e._registeredComponents && e._registeredComponents.add(o)
          }),
          (c._ssrRegister = d))
        : t &&
          (d = r
            ? function(e) {
                t.call(this, a(e, this.$root.$options.shadowRoot))
              }
            : function(e) {
                t.call(this, l(e))
              }),
      d)
    )
      if (c.functional) {
        const e = c.render
        c.render = function(t, n) {
          return d.call(n), e(t, n)
        }
      } else {
        const e = c.beforeCreate
        c.beforeCreate = e ? [].concat(e, d) : [d]
      }
    return n
  }
  const p = h(
    {
      render: function() {
        var e = this,
          t = e.$createElement,
          n = e._self._c || t
        return n(
          'div',
          { ref: 'root' },
          [
            e._t(
              'default',
              function() {
                return [
                  n('div', e._b({}, 'div', e.rootProps, !1), [
                    n(
                      'input',
                      e._g(
                        e._b(
                          {
                            ref: 'input',
                            on: {
                              input: e.handleInput,
                              keydown: e.core.handleKeyDown,
                              focus: e.core.handleFocus,
                              blur: e.core.handleBlur,
                            },
                          },
                          'input',
                          e.inputProps,
                          !1
                        ),
                        e.$listeners
                      )
                    ),
                    e._v(' '),
                    n(
                      'ul',
                      e._g(
                        e._b(
                          { ref: 'resultList' },
                          'ul',
                          e.resultListProps,
                          !1
                        ),
                        e.resultListListeners
                      ),
                      [
                        e._l(e.results, function(t, s) {
                          return [
                            e._t(
                              'result',
                              function() {
                                return [
                                  n(
                                    'li',
                                    e._b(
                                      { key: e.resultProps[s].id },
                                      'li',
                                      e.resultProps[s],
                                      !1
                                    ),
                                    [
                                      e._v(
                                        '\n              ' +
                                          e._s(e.getResultValue(t)) +
                                          '\n            '
                                      ),
                                    ]
                                  ),
                                ]
                              },
                              { result: t, props: e.resultProps[s] }
                            ),
                          ]
                        }),
                      ],
                      2
                    ),
                  ]),
                ]
              },
              {
                rootProps: e.rootProps,
                inputProps: e.inputProps,
                inputListeners: e.inputListeners,
                resultListProps: e.resultListProps,
                resultListListeners: e.resultListListeners,
                results: e.results,
                resultProps: e.resultProps,
              }
            ),
          ],
          2
        )
      },
      staticRenderFns: [],
    },
    void 0,
    {
      name: 'Autocomplete',
      inheritAttrs: !1,
      props: {
        search: { type: Function, required: !0 },
        baseClass: { type: String, default: 'autocomplete' },
        autoSelect: { type: Boolean, default: !1 },
        getResultValue: {
          type: Function,
          default: function(e) {
            return e
          },
        },
        defaultValue: { type: String, default: '' },
        debounceTime: { type: Number, default: 0 },
        resultListLabel: { type: String, default: void 0 },
        submitOnEnter: { type: Boolean, default: !1 },
      },
      data: function() {
        var e,
          t,
          n,
          s,
          i = new a({
            search: this.search,
            autoSelect: this.autoSelect,
            setValue: this.setValue,
            onUpdate: this.handleUpdate,
            onSubmit: this.handleSubmit,
            onShow: this.handleShow,
            onHide: this.handleHide,
            onLoading: this.handleLoading,
            onLoaded: this.handleLoaded,
            submitOnEnter: this.submitOnEnter,
          })
        return (
          this.debounceTime > 0 &&
            (i.handleInput =
              ((e = i.handleInput),
              (t = this.debounceTime),
              function() {
                var i = this,
                  o = arguments,
                  r = function() {
                    (s = null), n || e.apply(i, o)
                  },
                  l = n && !s
                clearTimeout(s), (s = setTimeout(r, t)), l && e.apply(i, o)
              })),
          {
            core: i,
            value: this.defaultValue,
            resultListId: d(''.concat(this.baseClass, '-result-list-')),
            results: [],
            selectedIndex: -1,
            expanded: !1,
            loading: !1,
            position: 'below',
            resetPosition: !0,
          }
        )
      },
      computed: {
        rootProps: function() {
          return {
            class: this.baseClass,
            style: { position: 'relative' },
            'data-expanded': this.expanded,
            'data-loading': this.loading,
            'data-position': this.position,
          }
        },
        inputProps: function() {
          return t(
            {
              class: ''.concat(this.baseClass, '-input'),
              value: this.value,
              role: 'combobox',
              autocomplete: 'off',
              autocapitalize: 'off',
              autocorrect: 'off',
              spellcheck: 'false',
              'aria-autocomplete': 'list',
              'aria-haspopup': 'listbox',
              'aria-owns': this.resultListId,
              'aria-expanded': this.expanded ? 'true' : 'false',
              'aria-activedescendant':
                this.selectedIndex > -1
                  ? this.resultProps[this.selectedIndex].id
                  : '',
            },
            this.$attrs
          )
        },
        inputListeners: function() {
          return {
            input: this.handleInput,
            keydown: this.core.handleKeyDown,
            focus: this.core.handleFocus,
            blur: this.core.handleBlur,
          }
        },
        resultListProps: function() {
          var e,
            t = 'below' === this.position ? 'top' : 'bottom',
            n = (function(e) {
              if (null != e && e.length) {
                var t = e.startsWith('#')
                return {
                  attribute: t ? 'aria-labelledby' : 'aria-label',
                  content: t ? e.substring(1) : e,
                }
              }
            })(this.resultListLabel)
          return (
            o(
              (e = {
                id: this.resultListId,
                class: ''.concat(this.baseClass, '-result-list'),
                role: 'listbox',
              }),
              null == n ? void 0 : n.attribute,
              null == n ? void 0 : n.content
            ),
            o(
              e,
              'style',
              o(
                {
                  position: 'absolute',
                  zIndex: 1,
                  width: '100%',
                  visibility: this.expanded ? 'visible' : 'hidden',
                  pointerEvents: this.expanded ? 'auto' : 'none',
                },
                t,
                '100%'
              )
            ),
            e
          )
        },
        resultListListeners: function() {
          return {
            mousedown: this.core.handleResultMouseDown,
            click: this.core.handleResultClick,
          }
        },
        resultProps: function() {
          var e = this
          return this.results.map(function(n, s) {
            return t(
              {
                id: ''.concat(e.baseClass, '-result-').concat(s),
                class: ''.concat(e.baseClass, '-result'),
                'data-result-index': s,
                role: 'option',
              },
              e.selectedIndex === s ? { 'aria-selected': 'true' } : {}
            )
          })
        },
      },
      mounted: function() {
        document.body.addEventListener('click', this.handleDocumentClick)
      },
      beforeUnmount: function() {
        document.body.removeEventListener('click', this.handleDocumentClick)
      },
      updated: function() {
        var e, t, n, s
        this.$refs.input &&
          this.$refs.resultList &&
          (this.resetPosition &&
            this.results.length > 0 &&
            ((this.resetPosition = !1),
            (this.position =
              ((e = this.$refs.input),
              (t = this.$refs.resultList),
              (n = e.getBoundingClientRect()),
              (s = t.getBoundingClientRect()),
              n.bottom + s.height > window.innerHeight &&
              window.innerHeight - n.bottom < n.top &&
              window.pageYOffset + n.top - s.height > 0
                ? 'above'
                : 'below'))),
          this.core.checkSelectedResultVisible(this.$refs.resultList))
      },
      methods: {
        setValue: function(e) {
          this.value = e ? this.getResultValue(e) : ''
        },
        handleUpdate: function(e, t) {
          (this.results = e),
            (this.selectedIndex = t),
            this.$emit('update', e, t)
        },
        handleShow: function() {
          this.expanded = !0
        },
        handleHide: function() {
          (this.expanded = !1), (this.resetPosition = !0)
        },
        handleLoading: function() {
          this.loading = !0
        },
        handleLoaded: function() {
          this.loading = !1
        },
        handleInput: function(e) {
          (this.value = e.target.value), this.core.handleInput(e)
        },
        handleSubmit: function(e) {
          this.$emit('submit', e)
        },
        handleDocumentClick: function(e) {
          this.$refs.root.contains(e.target) || this.core.hideResults()
        },
      },
    },
    void 0,
    !1,
    void 0,
    !1,
    void 0,
    void 0,
    void 0
  )
  function f(e) {
    f.installed || ((f.installed = !0), e.component('Autocomplete', p))
  }
  var b,
    v = { install: f }
  return (
    'undefined' != typeof window
      ? (b = window.Vue)
      : 'undefined' != typeof global && (b = global.Vue),
    b && b.use(v),
    (p.install = f),
    p
  )
})()
